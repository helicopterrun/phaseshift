# scripts.yaml

script:

  #──────────────────────────────────────────────────────────────
  # Publish the correct setpoints for the current phase
  #──────────────────────────────────────────────────────────────
  - id: publish_mode_setpoints
    then:
      - lambda: |-
          std::string m = id(mode).state;
          float db, dp;
          if (m == "Ramp") {
            db = id(ramp_temp_setpoint_dynamic).state;
            dp = id(ramp_dwpt_setpoint_dynamic).state;
          } else if (m == "Plateau") {
            db = id(plateau_temp).state;
            dp = id(plateau_dewpoint).state;
          } else {
            db = id(hold_temp).state;
            dp = id(hold_dewpoint).state;
          }
          id(drybulb_setpoint).publish_state(db);
          id(dewpoint_setpoint).publish_state(dp);
      - button.press: submit_values

  # ──────────────────────────────────────────────────────────────────────────────
  # update_mode_from_elapsed: auto-advance phases by “pressing” your buttons
  # ──────────────────────────────────────────────────────────────────────────────
  - id: update_mode_from_elapsed
    then:
      # 1) If we’re in Ramp and have hit the ramp duration → switch to Plateau
      - if:
          condition:
            and:
              - lambda: 'return id(mode).state == "Ramp";'
              # compare elapsed seconds to your ramp_duration (in seconds)
              - lambda: 'return id(ramp_elapsed) >= id(ramp_duration_s).state;'
          then:
            - button.press:
                id: switch_to_plateau

      # 2) If we’re in Plateau and have hit the plateau duration → switch to Hold
      - if:
          condition:
            and:
              - lambda: 'return id(mode).state == "Plateau";'
              # compare elapsed seconds to your plateau_duration (in seconds)
              - lambda: 'return id(plateau_elapsed) >= id(plateau_duration_s).state;'
          then:
            - button.press:
                id: switch_to_hold

  # Update the circulation fan output
  - id: update_circulation_fan
    mode: restart
    then:
      - component.update: circ_fan_command

  # TEC driver initialization on boot
  - id: ti_driver_startup
    then:
      - output.turn_off: nsleep_a
      - output.turn_off: nsleep_b
      - delay: 100ms
      - output.turn_on: p_mode
      - output.set_level:
          id: imode_a
          level: 0%
      - output.set_level:
          id: imode_b
          level: 0%
      - output.turn_on: nsleep_a
      - output.turn_on: nsleep_b
      - number.set:
          id: pwm_max_current_number
          value: ${default_max_current}
      - button.press: apply_current_settings
      - number.set:
          id: tec_pl_number
          value: 0.0
      - button.press: set_pwm

  # Restore last phase and units on boot
  - id: return_to_default
    then:
      - script.execute: restore_mode
      - script.execute: update_circulation_fan

  - id: restore_mode
    then:
      - select.set:
          id: mode
          option: !lambda 'return id(last_mode);'

  # Push current setpoints to controllers
  - id: activate_setpoints
    then:
      - button.press: submit_values

  # Temporary defrost cycle when icing detected
  - id: defrost_cycle
    then:
      - logger.log: "Defrost cycle started"
      - climate.control:
          id: pid_cold
          mode: HEAT_COOL
          target_temperature: 5°C
      - delay: 5min
      - logger.log: "Defrost complete, resuming normal cooling"
      - climate.control:
          id: pid_cold
          mode: COOL
          target_temperature: !lambda 'return id(cold_hs_setpoint).state;'

  # Update all elapsed-time sensors
  - id: update_elapsed_times
    then:
      - component.update: total_time_formatted

      - if:
          condition:
            lambda: 'return id(mode).state == "Ramp";'
          then:
            - component.update: ramp_time_elapsed

      - if:
          condition:
            lambda: 'return id(mode).state == "Plateau";'
          then:
            - component.update: plateau_time_elapsed

      - if:
          condition:
            lambda: 'return id(mode).state == "Hold";'
          then:
            - component.update: hold_time_elapsed

      - script.execute: update_dynamic_setpoints

  #──────────────────────────────────────────────────────────────
  # Update all dynamic ramp/plateau/hold setpoints, circulation fan,
  # and republish current mode setpoints
  #──────────────────────────────────────────────────────────────
  - id: update_dynamic_setpoints
    then:
      - component.update: ramp_temp_setpoint_dynamic
      - component.update: ramp_dwpt_setpoint_dynamic
      - component.update: ramp_fan_speed_setpoint_dynamic
      - component.update: ramp_fan_modulation_setpoint_dynamic
      - if:
          condition:
            lambda: 'return id(mode).state == "Ramp";'
          then:
            - script.execute: publish_mode_setpoints
            - script.execute: activate_setpoints