# controls.yaml

#—————————————————————————————————————
# Duration controls for each phase
#—————————————————————————————————————
number:
  - platform: template
    name: "Ramp Duration"
    id: ramp_duration
    icon: mdi:calendar-clock
    optimistic: true
    restore_value: false
    initial_value: ${ramp_duration}
    min_value: 0
    max_value: 256
    step: 1

  - platform: template
    name: "Plateau Duration"
    id: plateau_duration
    icon: mdi:calendar-clock
    optimistic: true
    restore_value: false
    initial_value: ${plateau_duration}
    min_value: 0
    max_value: 256
    step: 1

#—————————————————————————————————————
# Ramp-stage dynamic setpoint overrides
#—————————————————————————————————————
  - platform: template
    name: "Ramp Start Dewpoint"
    id: ramp_start_dewpoint
    unit_of_measurement: ${temp_unit}
    optimistic: true
    initial_value: ${ramp_start_dewpoint}
    min_value: 0
    max_value: 100
    step: 0.5
    icon: mdi:weather-fog

  - platform: template
    name: "Ramp End Dewpoint"
    id: ramp_end_dewpoint
    unit_of_measurement: ${temp_unit}
    optimistic: true
    initial_value: ${ramp_end_dewpoint}
    min_value: 0
    max_value: 100
    step: 0.5
    icon: mdi:weather-fog

  - platform: template
    name: "Ramp Start Temperature"
    id: ramp_start_temp
    unit_of_measurement: ${temp_unit}
    optimistic: true
    initial_value: ${ramp_start_temp}
    min_value: 0
    max_value: 100
    step: 0.5
    icon: mdi:thermometer

  - platform: template
    name: "Ramp End Temperature"
    id: ramp_end_temp
    unit_of_measurement: ${temp_unit}
    optimistic: true
    initial_value: ${ramp_end_temp}
    min_value: 0
    max_value: 100
    step: 0.5
    icon: mdi:thermometer

  - platform: template
    name: "Ramp Start Fan Speed"
    id: ramp_start_fan_speed
    unit_of_measurement: "%"
    optimistic: true
    initial_value: ${ramp_start_fan_speed}
    min_value: 0
    max_value: 100
    step: 1
    icon: mdi:fan

  - platform: template
    name: "Ramp End Fan Speed"
    id: ramp_end_fan_speed
    unit_of_measurement: "%"
    optimistic: true
    initial_value: ${ramp_end_fan_speed}
    min_value: 0
    max_value: 100
    step: 1
    icon: mdi:fan

  - platform: template
    name: "Ramp Start Fan Modulation"
    id: ramp_start_fan_modulation
    unit_of_measurement: "sec/min"
    optimistic: true
    initial_value: ${ramp_start_fan_modulation}
    min_value: 0
    max_value: 60
    step: 1
    icon: mdi:timer

  - platform: template
    name: "Ramp End Fan Modulation"
    id: ramp_end_fan_modulation
    unit_of_measurement: "sec/min"
    optimistic: true
    initial_value: ${ramp_end_fan_modulation}
    min_value: 0
    max_value: 60
    step: 1
    icon: mdi:timer

#—————————————————————————————————————
# Phase selector
#—————————————————————————————————————
select:
  - platform: template
    name: "Phase"
    id: mode
    options:
      - "Ramp"
      - "Plateau"
      - "Hold"
    initial_option: "Hold"
    optimistic: true
    set_action:
      then:
        - logger.log:
            format: "Phase → %s"
            args: [ x.c_str() ]
        - script.execute: update_circulation_fan

#—————————————————————————————————————
# Submit button
#—————————————————————————————————————
button:
  - platform: template
    name: "Submit Setpoints"
    id: submit_values
    icon: mdi:check
    on_press:
      then:
        - sensor.template.publish:
            id: drybulb_celcius
            state: !lambda |-
              float v = id(drybulb_setpoint).state;
              if (${use_fahrenheit}) {
                v = (v - 32.0) * 5.0 / 9.0;
              }
              return v;
        - sensor.template.publish:
            id: dewpoint_celcius
            state: !lambda |-
              float v = id(dewpoint_setpoint).state;
              if (${use_fahrenheit}) {
                v = (v - 32.0) * 5.0 / 9.0;
              }
              return v;
        - climate.control:
            id: pid_drybulb
            mode: HEAT_COOL
            target_temperature: !lambda 'return id(drybulb_celcius).state;'
        - climate.control:
            id: pid_dewpoint
            mode: COOL
            target_temperature: !lambda 'return id(dewpoint_celcius).state;'
