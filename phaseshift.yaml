# phaseshift.yaml
# PhaseShift Open Environmental Control
# Version: 2025.10.06.1
# Developer: @helicopterrun
#
# This is the main configuration file for PhaseShift, a TEC-based climate chamber
# for precise temperature and dewpoint control.
#
# Architecture:
# - Hardware layer: Temperature sensors, Climate sensors, TEC drivers, Heater, fans
# - Control layer: Three cascaded PID loops (cold heatsink, drybulb, dewpoint)
# - Phase management: Ramp (linear interpolation) → Plateau → Hold
# - All control logic is modularized in packages/ directory
# ═══════════════════════════════════════════════════════════════════════════

substitutions:
  # DEVICE IDENTITY
  device_id:  "phaseshift"
  device_name: "PhaseShift"

  # NETWORK CONFIGURATION
  # Static IP recommended for reliable Home Assistant integration
  network_static_ip: "192.168.50.224"
  network_gateway:   "192.168.50.1"
  network_subnet:    "255.255.255.0"

  # TIME CONFIGURATION
  timezone: "America/Los_Angeles"  # IANA timezone for timestamp formatting

  # TEMPERATURE UNITS
  # Note: Internal calculations always use Celsius. This controls display units.
  use_fahrenheit: "true"
  temp_unit: "°F"

  # TEC DRIVER LIMITS
  # Maximum current per TEC module in Amps (hardware limit: 8A)
  # Match with TEC modules used in system
  default_max_current: "3.5"

  # PHASE DURATIONS (Default Recipe)
  # Ramp: Linear transition from start conditions to end conditions
  # Plateau: Stable intermediate conditions before final hold
  # Note: Durations are in DAYS. Hours are added via separate controls.
  ramp_duration: "5"
  plateau_duration: "5"

  # RAMP PHASE SETPOINTS (Start → End)
  # Temperature and dewpoint will interpolate linearly over ramp_duration
  ramp_start_dewpoint: "58.0"      # °F - Initial humidity level
  ramp_end_dewpoint: "54.0"        # °F - Target humidity at ramp end
  ramp_start_temp: "68.0"          # °F - Initial chamber temperature
  ramp_end_temp: "68.0"            # °F - Target temperature at ramp end

  # Fan control during ramp (also interpolates linearly)
  ramp_start_fan_speed: "100"      # % - Initial circulation fan speed
  ramp_end_fan_speed: "40"         # % - Final circulation fan speed
  ramp_start_fan_modulation: "100" # sec/min - Fan duty cycle (60 = continuous)
  ramp_end_fan_modulation: "30"    # sec/min - Reduced duty for case hardening

  # PLATEAU PHASE SETPOINTS (Static)
  plateau_dewpoint: "54.0"         # °F
  plateau_temp: "68.0"             # °F
  plateau_fan_speed: "10"          # %
  plateau_fan_modulation: "30"     # sec/min

  # HOLD PHASE SETPOINTS (Static Long-term Storage)
  hold_dewpoint: "55.0"            # °F
  hold_temp: "68.0"                # °F
  hold_fan_speed: "10"             # %
  hold_fan_modulation: "30"        # sec/min

  # I²C BUS CONFIGURATION
  # ESP32 GPIO pins for I²C bus (sensors and DACs)
  i2c_sda: "21"
  i2c_scl: "22"

  # I²C device addresses (7-bit format)
  ads1115_address:  "0x49"  # ADC for current sensing
  mcp4728_address:  "0x60"  # 4-channel DAC for TEC current limiting

  # TEC DRIVER CONTROL PINS
  # Texas Instruments DRV8871 H-bridge driver control
  nsleep_a_pin:   "26"  # Sleep control for driver A (active high)
  nsleep_b_pin:   "18"  # Sleep control for driver B (active high)
  p_mode_pin:     "19"  # Phase/enable mode (PWM when high)

  # TEC PWM OUTPUTS
  # High-frequency PWM for smooth TEC control
  pwm_tec_a_pin:  "13"
  pwm_tec_b_pin:  "33"
  pwm_tec_freq:   "19531Hz"  # ~20kHz for inaudible operation

  # FAN PWM OUTPUTS
  pwm_fan_hot_pin:  "32"   # Hot-side heatsink fan (exhaust)
  pwm_fan_cold_pin: "25"   # Cold-side heatsink fan (condensing coil)
  pwm_fan_circ_pin: "17"   # Chamber circulation fan
  pwm_fan_freq:     "25000Hz"  # 25kHz for 4-wire PWM fans

  # HEATER CONTROL
  heat_pin: "12"  # Relay control for resistive heater (active low)

  # TEMPERATURE SENSOR CONFIGURATION
  # Dallas 1-Wire bus (alternative to TMP117 - see hardware_dallas.yaml)
  dallas_pin:         "27"
  cold_temp_address:  "0x4B"  # 1-Wire address for cold heatsink sensor
  hot_temp_address:   "0x48"  # 1-Wire address for hot heatsink sensor

# PACKAGE IMPORTS
# Control logic is modularized into separate files for maintainability
packages:
  hardware:  !include packages/hardware_tmp117.yaml  # Sensors & I²C devices
  controls:  !include packages/controls.yaml         # User inputs & setpoints
  sensors:   !include packages/sensors.yaml          # Calculated values & algorithms
  climate:   !include packages/climate.yaml          # PID controllers
  actuators: !include packages/actuators.yaml        # Outputs (fans, TECs, heater)
  scripts:   !include packages/scripts.yaml          # Automation logic
  timing:    !include packages/timing.yaml           # SNTP & intervals

# ESPHOME CORE CONFIGURATION
esphome:
  name: $device_id
  friendly_name: $device_name
  name_add_mac_suffix: true  # Allows multiple units on same network

  on_boot:
    priority: 600  # Run after WiFi but before other components
    then:
      - script.execute: ti_driver_startup  # Initialize TEC drivers safely

esp32:
  board: mhetesp32minikit
  framework:
    type: arduino

# Wi-Fi, Logging, API & OTA
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: none
  manual_ip:
    static_ip: $network_static_ip
    gateway: $network_gateway
    subnet: $network_subnet

# LOGGING CONFIGURATION
logger:
  level: DEBUG
  logs:
    # Reduce noise from frequently updating components
    template.sensor: WARN
    gpio.output: WARN
    template.number: WARN
    ledc.output: WARN
    switch.gpio: WARN
    # Keep sensor info visible for debugging
    tmp117: INFO
    sht3xd: INFO
    ads1115.sensor: INFO
    # Suppress text sensor spam
    text_sensor: NONE
    bme280.sensor: NONE

# HOME ASSISTANT INTEGRATION
api:
  encryption:
    key: !secret ss2_api
ota:
  - platform: esphome
    password: !secret ss2_ota

# GLOBAL VARIABLES (State Persistence)
# These maintain state across reboots and power cycles
globals:
  # Phase Timestamps (UNIX epoch seconds)
  # Used to calculate elapsed time and determine when to advance phases
  # Initial value of 0 indicates "never started"
  
  - id: cycle_start_timestamp
    type: uint32_t
    restore_value: true
    initial_value: '0'
    
  - id: ramp_start_timestamp
    type: uint32_t
    restore_value: true
    initial_value: '0'
    
  - id: plateau_start_timestamp
    type: uint32_t
    restore_value: true
    initial_value: '0'
    
  - id: hold_start_timestamp
    type: uint32_t
    restore_value: true
    initial_value: '0'

  # Phase State
  - id: last_mode
    type: std::string
    restore_value: true
    initial_value: '"Hold"'  # Safe default on first boot

  # Elapsed Time Accumulators (seconds)
  # These persist the last known elapsed time for each phase
  # Updated every second while in the respective phase
  
  - id: ramp_elapsed
    type: uint32_t
    restore_value: yes
    initial_value: '0'
    
  - id: plateau_elapsed
    type: uint32_t
    restore_value: yes
    initial_value: '0'
    
  - id: hold_elapsed
    type: uint32_t
    restore_value: yes
    initial_value: '0'
